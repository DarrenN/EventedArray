// Generated by CoffeeScript 1.6.3
(function() {
  var Enumerable, root,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Enumerable = (function() {
    function Enumerable(values) {
      this.values = values != null ? this.handleType(values) : [];
      this.events = {};
    }

    Enumerable.prototype.handleType = function(value) {
      if (value != null) {
        if (value instanceof Array) {
          return value;
        } else if (value instanceof Object) {
          return [value];
        } else if (typeof value === "string" || typeof value === "number") {
          return [value];
        }
      }
      return void 0;
    };

    Enumerable.prototype.set = function(value) {
      this.values.push(value);
      return this.trigger('set', value);
    };

    Enumerable.prototype.get = function(index) {
      var val;
      if (this.values[index] != null) {
        val = this.values[index];
      }
      if (val != null) {
        return this.trigger('get', val);
      }
    };

    Enumerable.prototype.pop = function() {
      this.values.pop();
      return this.trigger('pop');
    };

    Enumerable.prototype.map = function(fn) {
      var _this = this;
      return this.values.map(function(v) {
        _this.trigger('map', v);
        return fn(v);
      });
    };

    Enumerable.prototype.forEach = function(fn) {
      var _this = this;
      this.values.forEach(function(v) {
        _this.trigger('forEach', v);
        return fn(v);
      });
      return this.values;
    };

    Enumerable.prototype.register = function(event, fn) {
      return this.events[event] = fn;
    };

    Enumerable.prototype.trigger = function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((event != null) && (this.events[event] != null)) {
        this.events[event](args);
      }
      return this.cleanReturnVal(args);
    };

    Enumerable.prototype.cleanReturnVal = function(val) {
      if (val instanceof Array && val.length === 1) {
        return val[0];
      }
      return val;
    };

    Enumerable.prototype.toString = function() {
      return this.values.toString();
    };

    return Enumerable;

  })();

  if (typeof module === 'object' && module && typeof module.exports === 'object') {
    module.exports = Enumerable;
  } else if (typeof exports === 'object' && exports) {
    exports.Enumerable = Enumerable;
  } else if (typeof define === 'function' && define.amd) {
    define('Enumerable', [], function() {
      return Enumerable;
    });
  } else {
    root.Enumerable = Enumerable;
  }

}).call(this);
